use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;


//use ark_ff::BigInt;
use ark_ff::{Field, PrimeField, FpConfig, BigInteger};
use ark_bls12_381::Fq;
use ark_std::str::FromStr;
use core::str;

use num_bigint::BigInt;
use num_traits::Num;

fn init_state(state: &mut Vec<Fq>) {

}


/********************************************************
Struct that keeps the rounds constants and the
MDS matrix.
 *********************************************************/
  pub struct Constants {
    pub c: Vec<Fq>,
    pub m: Vec<Vec<Fq>>
}

/********************************************************
Reads the round constants and MDS matriz from the
given file_name generated by the sage subrutine.
 *********************************************************/
pub fn read_constants(file_name: &str) -> Constants {
    let file = File::open(file_name).expect("file not found");
    let reader = BufReader::new(file);

    let mut c: Vec<Fq> = Vec::new();
    let mut m: Vec<Vec<Fq>> = Vec::new();

    let mut i = 0;

    for line in reader.lines() {
        if i == 2 {
            let mut rconst: String = line
                .unwrap()
                .replace(" ", "")
                .replace("'", "");
            rconst.pop();
            rconst.remove(0);
    
            let constants: Vec<&str> = rconst.split(',').collect();
            for constant in constants {
                let n = BigInt::from_str_radix(&constant[2..], 16).unwrap();
                let number: Fq = Fq::from_str(&n.to_string()).unwrap();
                c.push(number);
            }
            i += 1;
        }
        else if i == 15 {

            let mut mds = line
                .unwrap()
                .replace(" ","")
                .replace("'", "");
            mds.pop(); mds.pop();
            mds.remove(0); mds.remove(0);
            let rows:  Vec<&str> = mds.split("],[").collect();

            for r in rows {
                let rows_vector: Vec<&str> = r.split(",").collect();
                let mut mi: Vec<Fq> = Vec::new();
                for r2 in rows_vector {
                    let n2 = BigInt::from_str_radix(&r2[2..], 16).unwrap();
                    let v2: Fq = Fq::from_str(&n2.to_string()).unwrap();
                    mi.push(v2);
                }
                m.push(mi);
            }
            i += 1;
        }
        i += 1;
    }
   
    Constants {c,m}

}